{"version":3,"sources":["App.js","api/requestapi.js","serviceWorker.js","index.js"],"names":["App","state","dataBuku","this","fetchBuku","fetch","then","respon","json","penerima","data","console","log","bukuHandle","items","setState","className","id","src","alt","map","href","accessInfo","webReaderLink","style","height","backgroundColor","volumeInfo","imageLinks","thumbnail","color","fontSize","marginBottom","overflow","title","textAlign","publisher","publishedDate","pageCount","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iQAqHeA,E,2MA7GfC,MAAQ,CACNC,SAAU,I,mFAIVC,KAAKC,c,kCAGO,IAAD,OCdFC,MADE,iHAERC,MAAK,SAAAC,GACF,OAAOA,EAAOC,UAEjBF,MAAK,SAAAG,GACF,OAAOA,KDWZH,MAAM,SAAAI,GACLC,QAAQC,IAAIF,GACZ,IAAMG,EAAaH,EAAKI,MACxB,EAAKC,SAAS,CAGZb,SAAUW,S,+BAOL,IACDX,EAAaC,KAAKF,MAAlBC,SAER,OADAS,QAAQC,IAAIV,GAEV,yBAAKc,UAAU,OACb,6BAASC,GAAG,WACZ,yBAAKD,UAAU,aACT,6BACA,6BACA,6BACA,6BACJ,yBAAKA,UAAU,OACf,yBAAKA,UAAU,gBAEX,yBAAKE,IAAI,yBAAyBC,IAAI,kBAEtC,6BACA,6BACE,4EACA,kJAEI,6BACA,6BACA,6BACA,6BACA,iCAQd,6BAASF,GAAG,oBACZ,yBAAKD,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,yBAEb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,oBAAd,iBACA,0BAAMA,UAAU,kBAChB,8FAGF,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,OAETd,GAEAA,EAASkB,KAAI,SAAAV,GAAI,OACf,uBAAGW,KAAMX,EAAKY,WAAWC,eACvB,yBAAKP,UAAU,qBACb,yBAAKA,UAAU,0BAA0BQ,MAAO,CAACC,OAAO,QAAQC,gBAAgB,SAC9E,0BAAMV,UAAU,6BACd,yBAAKE,IAAKR,EAAKiB,WAAWC,WAAWC,UAAWL,MAAO,CAACC,OAAO,SAAWN,IAAI,MAGhF,wBAAIK,MAAO,CAACM,MAAM,QAASC,SAAS,OAAQC,aAAa,OAAQC,SAAS,WAAYvB,EAAKiB,WAAWO,MAAtG,MACA,4BACA,yBAAKlB,UAAU,cAAcQ,MAAO,CAACW,UAAU,SAE/C,2BAAG,iDAAH,IAA8BzB,EAAKiB,WAAWS,WAC9C,2BAAG,iDAAH,IAA8B1B,EAAKiB,WAAWU,eAC9C,2BAAG,iDAAH,IAA8B3B,EAAKiB,WAAWW,8B,GA1FxDC,IAAMC,WEOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.852172b7.chunk.js","sourcesContent":["import React from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport { getBuku } from './api/requestapi'; //mengakses ke file requestapi.js \r\n\r\nclass App extends React.Component { //knp class, krn web yg akan dibuat sifatnya dinamis. React.Component utk mengakses line 1\r\n                                  //render utk 'nge-build' html di dalamnya\r\n\r\nstate = {\r\n  dataBuku: []  //json disimpan di sini\r\n}\r\n\r\ncomponentDidMount(){  //ketika ada perubahan data, dia bakal menjalankan code di bawahnya lalu dirender ulang\r\n  this.fetchBuku();\r\n}\r\n\r\nfetchBuku () {\r\n  getBuku () \r\n  .then (data=>{\r\n    console.log(data);\r\n    const bukuHandle = data.items;    //bikin variabel bukuHandle \r\n    this.setState({   \r\n    //SetState utk mengubah isi wadah yg akan dirender. State adalah wadah untuk menyimpan data yg dipanggil dan akan merender ulang line 10. \r\n    //State hanya bisa di class itu saja. Tdk bisa dipakai di class lain.\r\n      dataBuku: bukuHandle\r\n    })\r\n  }) \r\n\r\n  \r\n}\r\n\r\nrender () {\r\n  const { dataBuku } = this.state;  //destruktur. dataBuku akan mengambil wadah (state) yg akan dipakai di code bawahnya                     \r\n  console.log(dataBuku)\r\n  return (\r\n    <div className=\"App\">\r\n      <section id=\"mu-hero\">\r\n      <div className=\"container\">\r\n            <br></br>\r\n            <br></br> \r\n            <br></br>\r\n            <br></br>\r\n        <div className=\"row\">\r\n        <div className=\"mu-hero-left\">\r\n            \r\n            <img src=\"assets/images/buku.png\" alt=\"buku logo img\"/>\r\n            {/* <br></br> */}\r\n            <br></br>\r\n            <br></br>\r\n              <h2> Where books are only one click away. Enjoy!</h2>\r\n              <p > Halaman ini akan menampilkan list buku dengan kata kunci 'Indonesia'. Dan kamu\r\n                  bisa langsung membacaya E-Booknya. </p>\r\n                  <br></br>\r\n                  <br></br>\r\n                  <br></br>\r\n                  <br></br>\r\n                  <br></br>\r\n              {/* <span> Silakan lakukan request kepada Admin untuk bisa menampilkan buku yang kamu inginkan :) </span> */}\r\n            </div>\r\n\r\n\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section id=\"mu-book-overview\">\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"mu-book-overview-area\">\r\n\r\n            <div className=\"mu-heading-area\">\r\n              <h2 className=\"mu-heading-title\">Book Overview</h2>\r\n              <span className=\"mu-header-dot\"></span>\r\n              <p> Akan menampilkan list buku pilihan untuk menemani hari-harimu</p>\r\n            </div>\r\n\r\n            <div className=\"mu-book-overview-content\">\r\n              <div className=\"row\">\r\n            \r\n                  { dataBuku && //pakai kurung kurawal spy bisa menyisipkan syntax JS. \r\n                                //&& jika data buku true, maka akan menjalankan kode dibawahnya\r\n                    dataBuku.map(data =>  //MAP fungsinya sama spt for. Mengulang array (dataBuku) dan menyimpan setiap array di data\r\n                      <a href={data.accessInfo.webReaderLink}>\r\n                        <div className=\"col-md-3 col-sm-6\">\r\n                          <div className=\"mu-book-overview-single\" style={{height:'550px',backgroundColor:'none'}}>\r\n                            <span className=\"mu-book-overview-icon-box\">\r\n                              <img src={data.volumeInfo.imageLinks.thumbnail} style={{height:'200px' }} alt=\"\" />\r\n                            </span>\r\n                            \r\n                            <h4 style={{color:'black', fontSize:'20px', marginBottom:'20px', overflow:'hidden'}}>{data.volumeInfo.title}  </h4>\r\n                            <p>{}</p>\r\n                            <div className=\"description\" style={{textAlign:'left'}}>\r\n                            \r\n                            <p><b> Penerbit        :</b> {data.volumeInfo.publisher}</p> \r\n                            <p><b> Tanggal Rilis   :</b> {data.volumeInfo.publishedDate}</p> \r\n                            <p><b> Jumlah Halaman  :</b> {data.volumeInfo.pageCount}</p>\r\n                            </div>\r\n                            \r\n                          </div>\r\n                        </div>\r\n                      </a>\r\n                    )\r\n                  }\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n    </div>\r\n  )\r\n}\r\n\r\n}\r\n\r\nexport default App;\r\n","export function getBuku () {\r\n    const url = `https://www.googleapis.com/books/v1/volumes?q=intitle:programming&key=AIzaSyAVVtSl1BdoLr-p7ybSnFCS1eX6cW-f9zA`;\r\n    return fetch (url)\r\n    .then(respon=>{\t\t       \t//untuk merespon dari API yg ditangkap tadi\r\n        return respon.json();\t//untuk mengembalikan hasil respon berupa json\r\n    })\r\n    .then(penerima=>{\t\t    //ditangkap oleh var penerima\r\n        return penerima;\r\n\r\n    })\r\n};\r\n//mengeksport sebuah fungsi","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}